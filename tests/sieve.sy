cfun calloc(int nitems, int size) -> ptr void;
cfun atoi(str string) -> int;
cfun itoa(int value, str string, int base) -> str;
cfun free(ptr void to_free) -> void;
cfun puts(str string) -> int;

fun main(int argc, ptr str argv) -> int {
    int upper;
    if (argc == 2) {
        upper = atoi(argv[1]);
    }
    else {
        puts("Wrong number of arguments, expected 1");
        return 1;
    }

    ptr int prime_sieve = calloc(upper + 1, 8); /* Implementation may change */
    prime_sieve[0] = 1;
    prime_sieve[1] = 1;
    int curr_prime = 2;
    int curr_pos;
    while (curr_prime * curr_prime < upper) {
        if (prime_sieve[curr_prime] == 0) {
            puts(itoa(curr_prime));
            curr_pos = curr_prime + curr_prime;
            while (curr_pos <= upper) {
                prime_sieve[curr_pos] = 1;
                curr_pos += curr_prime;
            }
        }
        curr_prime = curr_prime + 1;
    }
    while (curr_prime <= upper) {
        if (prime_sieve[curr_prime] == 0) {
            puts(itoa(curr_prime));
        }
        curr_prime = curr_prime + 1;
    }
    free(prime_sieve);
    return 0;
}
